// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
    // Unit 5.3 5:30 -- shows one potential architecture of the CPU
    // So, I think we need to use the first bit/pin of "instruction" as the control bit
    // leading to the Mux that leads to the A register. That's why we use the first
    // bit of the instruction to determine if this is an A-instruction or a C-instruction.
    // TODO: determine whether instruction or ALU output should be a/b based on the 
    // instruction control bit...

    // first (most significant) bit of "instruction" should be used to select a or b
    // if sel is zero, then we want to output the instruction

    //Mux16(a=instruction, b=alufeedback, sel=instruction[15], out=toareg);

    // A register - determine if we should load a register or keep it the same
    // we'll use instruction[15] (A vs C instruction control bit) as well as
    // instruction[5] (which tells the ALU to save output to A register)
    Not(in=instruction[15], out=notinstruction15);
    And(a=instruction[15], b=instruction[5], out=loadafromalu);
    Or(a=notinstruction15, b=loadafromalu, out=loadaregister);
    Register(in=toareg, load=loadaregister, out=Aregout, out[0..14]=addressM);

    // instruction[12] tells us whether we pass the A register or M register into the ALU
    Mux16(a=Aregout, b=inM, sel=instruction[12], out=AMALUin);

    // D register loading
    Register(in=alufeedback, load=instruction[4], out=DALUin);

    // ALU
        // zx, // zero the x input?
        // nx, // negate the x input?
        // zy, // zero the y input?
        // ny, // negate the y input?
        // f,  // compute out = x + y (if 1) or x & y (if 0)
        // no; // negate the out output?
    ALU(x=DALUin, y=AMALUin, zx=instruction[11], nx=instruction[10], zy=instruction[9], 
    ny=instruction[8], f=instruction[7], no=instruction[6], zr=zr, ng=ng, out=alufeedback, out=outM);
    // I'm thinking either zr or ng will somehow feed into the program counter? maybe with some logic added?

    // just a dummy gate to forward instruction[3] to writeM output
    And(a=instruction[3], b=instruction[3], out=writeM);


    // PC Load logic
    And(a=instruction[1], b=zr, out=pcload1);
    And(a=instruction[2], b=ng, out=pcload2);
    Not(in=zr, out=notzr);
    Not(in=ng, out=notng);
    And(a=notzr, b=notng, out=notngnotzr);
    And(a=instruction[0], b=notngnotzr, out=pcload3);
    And(a=instruction[0], b=instruction[1], out=pcload4a);
    And(a=instruction[2], b=pcload4a, out=pcload4);
    Or(a=pcload1, b=pcload2, out=pcload5);
    Or(a=pcload3, b=pcload5, out=pcload6);
    Or(a=pcload4, b=pcload6, out=pcload);

    PC(in=Aregout, load=pcload, inc=1, reset=reset, out[0..14]=pc);





    // now let's think about the Mux that chooses between A register and inM (memory
    // coming into the CPU). I think we'll need to go back and revisit the charts
    // from chapter 4 which tell use when to use an A or M for ALU calculations.

    // Control bits for the ALU come from bits 4-9 (starting at 0) of the 
    // incoming instruction. But do the control bits of the ALU actually
    // come directly from the instruction input? Or do they come from like
    // the D register or the A/M input?... 
    // well. I don't think they come from D or A/M, because those are actual
    // values where the entire value is used. Like all 16 bits of those registers
    // are used for us to know what the value of those numbers are. So I think
    // we do quite literally pipe these bits 4-9 from the instruction to
    // the ALU...
}








    And (a=instruction[15], b=instruction[5], out=loadafromalu);
    Or (a=notinstruction15, b=loadafromalu, out=loadaregister);
    Register (in=toareg, load=loadaregister, out=Aregout, out[0..14]=addressM);

    Mux16 (a=Aregout, b=inM, sel=instruction[12], out=AMALUin);

    Register (in=alufeedback, load=instruction[4], out=DALUin);

    ALU (x=DALUin, y=AMALUin, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], zr=zr, ng=ng, out=alufeedback, out=outM);

    // just a dummy gate to forward instruction[3] to writeM output
    And (a=instruction[3], b=instruction[3], out=writeM);


    // PC Load logic
    And (a=instruction[1], b=zr, out=pcload1);
    And (a=instruction[2], b=ng, out=pcload2);
    Not (in=zr, out=notzr);
    Not (in=ng, out=notng);
    And (a=notzr, b=notng, out=notngnotzr);
    And (a=instruction[0], b=notngnotzr, out=pcload3);
    And (a=instruction[0], b=instruction[1], out=pcload4a);
    And (a=instruction[2], b=pcload4a, out=pcload4);
    Or (a=pcload1, b=pcload2, out=pcload5);
    Or (a=pcload3, b=pcload5, out=pcload6);
    Or (a=pcload4, b=pcload6, out=pcload);

    PC (in=Aregout, load=pcload, inc=1, reset=reset, out[0..14]=pc);
