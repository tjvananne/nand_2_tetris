// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs,
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN
        x[16], y[16],  // 16-bit inputs
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:

    // zx: if we not zx, then we can And16 it with x to accomplish set-zero or let x pass through functionality
    Not (in=zx, out=zx1);
    And16BroadcastTJV (a=x, b=zx1, out=x1);

    // nx: Hypothesis: this conditional not of "nx" is just an element-wise Xor?
    // TODO: come back and write some tests for my Xor16tjv chip if this fails...
    // BAD Hypothesis: Xor16tjv (a=x1, b=nx, out=x2); // interesting why this fails...
    Not16 (in=x1, out=x2);
    Mux16 (a=x1, b=x2, sel=nx, out=x3);


    // zy
    Not (in=zy, out=zy1);
    And16BroadcastTJV (a=y, b=zy1, out=y1);

    // ny: see nx hypothesis above. Hopefully I can build my own chips?
    // Xor16tjv (a=y1, b=ny, out=y2);
    Not16 (in=y1, out=y2);
    Mux16 (a=y1, b=y2, sel=ny, out=y3);

    // how do I conditionally apply Add16 if f is 1 and And16 if f is 0?
    // maybe make a selection between the two options with a Mux16?
    And16 (a=x3, b=y3, out=out0);
    Add16 (a=x3, b=y3, out=out1);

    // now select one of them with a Mut16 based on f as sel
    Mux16 (a=out0, b=out1, sel=f, out=out2);

    // no (negate out if no == 1)
    //Xor16tjv (a=out2, b=no, out=outtemp);
    Not16 (in=out2, out=out3);
    Mux16 (a=out2, b=out3, sel=no, out=out4);
    And16BroadcastTJV (a=out4, b=true, out=out);

    // zr
    //Or8Way (in=out4[0..7], out=zr1);
    //Or8Way (in=out4[8..15], out=zr2);
    //Or (a=zr1, b=zr2, out=zr);
    Or16WayTJV (in=out4, out=zr1);
    Not (in=zr1, out=zr);

    // ng
    // wait, can I just snag the first digit of "out"?
    // Note: can't subset internal nodes... so this fails
    // And (a=out2[15], b=true, out=ng);
    And16 (a=out4, b[0..14]=false, b[15]=true, out=ng1);
    Or16WayTJV (in=ng1, out=ng);



}
